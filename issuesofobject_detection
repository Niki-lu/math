* 安装slim下的setup.py文件，`setup.py install`
* 将object_detection/protos下所有的.proto文件全部转化成py文件
先确认电脑里是否有protobuf、protoc，在命令窗口输入：protobuf --version
protoc --version如果有显示版本则说明已安装  
如果没安装可以使用pip install protobuf安装
* 进行protobuf配置，终端进入models/research
protoc object_detection/protos/*.proto --python_out=.
* windows的cmd命令窗口切换路径，不同盘之间切换直接输入某盘，比如： D： 就切换至对应盘下再使用cd切到子路径
* 批量运行python文件
windows下：
新建一个文本文件，
输入
F:
cd F:\models  #先定位到py程序目录下。  
python ×××.py #运行py程序  
然后保存为.bat文件  
点击.bat文件就能运行python程序了。  
如果python需要参数输入，bat语法是python ×××.py 参数1 参数2  
对应python程序中，使用sys.argv[]来保存参数，其中第一个参数是python的文件名，即 ×××.py
后面才是要输入的参数。
Linux和Mac的批处理文件与Windows语法一致，但是后缀名称是 .sh而不是 .bat  
* python获取文件夹中所有文件
os.walk() 和os.listdir()
os.walk()遍历指定文件下所有的子目录、非目录子文件
os.listdir()返回指定的文件夹下包含的文件或文件夹名字的列表，这个列表按字母顺序排序
os.name #显示当前使用平台
os.getcwd()#显示当前python脚本工作路径
os.listdir('dirname')#返回指定目录下的所有文件和目录名
os.remove('fiename')#删除一个文件
os.makedirs('dirname/dirname')#生成多层递归目录
os.rmdir('dirname')#删除单极目录
os.rename('oldname','newname')#重命名文件
os.system()#运行shell命令注意，这里是打开一个新的shell，运行命令，命令结束后关闭shell
os.sep#显示当前平台下路径分隔符
os.linesep#给出当前平台使用的行终止符
os.environ #获取系统环境变量
os.path.abspath(path)#显示当前绝对路径
os.path.dirname(path) #返回该路径的父目录
os.path.basename(path)#返回该路径的最后一个目录或者文件，如果path以/或\结尾，返回空值
os.path.isfile(path)#如果path是一个文件，返回True
os.path.isdir(path)#如果path是一个目录。返回True
os.stat()#获取文件或者目录信息
os.path.split(path) #将path分割成路径名和文件名
os.path.join(path,name)#连接目录与文件名或目录 结果为path/name
* pycharm中无法选择复制粘贴
settings->editor->vim->将CRTL+C CTRL+V后面选择IDE
* 批量处理proto转换成py文件
```buildoutcfg
@echo off
for %%i in (*.proto) do (
    protoc --python_out=. %%i
    echo From %%i To %%~ni.py Successfully)

pause
```
问题是还剩下一些proto文件转换失败
因为必须在research目录下运行
protoc object_detection/protos/*.proto
否则会出现错误
* 安装object_detection API
其源码位置为：https://github.com/tensorflow/models
git clone git@github.com:tensorflow/models.git
可查阅object_detection/g2doc/installation
安装tensorflow
pip install tensorflow
pip install tensorflow-gpu
安装tensorflow依赖库
```buildoutcfg
pip install Cpython
pip install contextlib1
pip install pillow
pip install lxml
pip install jupyter
pip install matplotlib
```
object_detection API使用Protobuf来配置模型和训练参数。
因此需要编译protobuf依赖包。
安装protoc
pip install protobuf
编译protobuf依赖包
切换到models/research目录下
`protoc object_detection/protos/*.proto`
在widnows下处出现错误：
object_detection/protos/*.proto:No such file or directory 这个问题是object_detection Module的一个bug，
说明如下：
```text
This is a typical bug of the object_detection
 module working in windows.Here are detailed 
discussion #1591.Asolution is to compile those.
proto files one by one.you can write a batch to
 run.
```
于是一个一个运行
`protoc object_detection\protos\train.proto --python_out=.`
注意：  
运行上面命令时，不要在protos目录编译，在research目录下运行，否则会有
文件依赖相关的错误。网上编译好的protos文件不能直接使用，
可能出现版本匹配问题。
* 为依赖包添加环境变量
将models\research和models\research\slim添加环境变量
1. 函数添加
```text
import sys
sys.path.append('C:\\')
```
需要改启动脚本
2. 修改环境变量
修改环境变量PYTHONPATH,
3. 添加.pth文件
在site-packages 添加一个路径文件，例如niki.pth,该文件必须
以.pth为后缀，在文件里写上指定访问的python库位置，如下：
绝对地址：
×××\models\research\
×××\models\research\slim

* 安装完成后进行测试
python object_detection/builders/model_builder_test.py
正常会显示OK



* 在命令行中为python添加环境变量linux系统中
例如把tensorflow
export PYTHONPATH=$PYTHONPATH:'pwd':'pwd'

安装完测试research/object_detection/builders/model_build_test.py
在pycharm中运行一直出现如下错误：
NonModelError:cannot find model named absl.testing
使用
pip install absl-py
或
pip3 install absl-py都没有用。
发现安装只安装到anaconda下的python中，而我使用的是单独安装的python
，可以直接下载absl-py.gz然后在python安装目录下
python 
[参考文章](https://packaging.python.org/tutorials/installing-packages/)
[tensorflow解释文档](https://tensorflow.google.cn/api_docs/python/tf/estimator/Estimator?hl=zh-cn)
